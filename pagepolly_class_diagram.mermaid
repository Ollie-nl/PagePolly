classDiagram
    %% Frontend Components
    class AppComponent {
        -store: Store
        +render() JSX
    }
    
    class DashboardComponent {
        -vendors: Vendor[]
        -crawlStatus: Record~string, CrawlStatus~
        -statistics: Statistics
        +render() JSX
        +fetchData() void
    }
    
    class VendorListComponent {
        -vendors: Vendor[]
        -selectedVendor: Vendor|null
        +render() JSX
        +addVendor(vendor: Vendor) void
        +editVendor(id: number, data: Partial~Vendor~) void
        +deleteVendor(id: number) void
        +selectVendor(id: number) void
    }
    
    class ReportComponent {
        -reports: Report[]
        -filters: ReportFilters
        +render() JSX
        +fetchReports() void
        +exportReport(format: string) void
        +applyFilters(filters: ReportFilters) void
    }
    
    class SettingsComponent {
        -crawlerConfigs: CrawlerConfig[]
        +render() JSX
        +fetchCrawlerConfigs() void
        +saveCrawlerConfig(config: CrawlerConfig) void
        +deleteCrawlerConfig(id: number) void
    }
    
    %% Backend Services
    class VendorService {
        -repository: VendorRepository
        +getAll() Promise~Vendor[]~
        +getById(id: number) Promise~Vendor~
        +create(data: VendorDTO) Promise~Vendor~
        +update(id: number, data: VendorDTO) Promise~Vendor~
        +delete(id: number) Promise~boolean~
    }
    
    class CrawlService {
        -repository: CrawlRepository
        -vendorService: VendorService
        -crawlerFactory: CrawlerFactory
        +startCrawl(vendorId: number) Promise~CrawlJob~
        +getCrawlStatus(jobId: number) Promise~CrawlStatus~
        +getAllCrawls(filters: object) Promise~CrawlJob[]~
        +cancelCrawl(jobId: number) Promise~boolean~
        -processCrawlResults(results: CrawlResult) Promise~void~
    }
    
    class ResultService {
        -repository: ResultRepository
        +getResults(filters: object) Promise~CrawlResult[]~
        +getResultsByVendor(vendorId: number) Promise~CrawlResult[]~
        +getResultsByCrawl(crawlId: number) Promise~CrawlResult[]~
        +getStatistics() Promise~Statistics~
    }
    
    class ReportService {
        -resultService: ResultService
        +generateReport(filters: object) Promise~Report~
        +exportReport(reportId: number, format: string) Promise~Buffer~
    }
    
    class SettingService {
        -repository: SettingRepository
        +getCrawlerConfigs() Promise~CrawlerConfig[]~
        +updateCrawlerConfig(id: number, config: CrawlerConfig) Promise~CrawlerConfig~
        +deleteCrawlerConfig(id: number) Promise~boolean~
    }
    
    %% Repositories
    class VendorRepository {
        +findAll() Promise~Vendor[]~
        +findById(id: number) Promise~Vendor~
        +create(data: object) Promise~Vendor~
        +update(id: number, data: object) Promise~Vendor~
        +delete(id: number) Promise~boolean~
    }
    
    class CrawlRepository {
        +findAll(filters: object) Promise~CrawlJob[]~
        +findById(id: number) Promise~CrawlJob~
        +create(data: object) Promise~CrawlJob~
        +update(id: number, data: object) Promise~CrawlJob~
        +saveCrawlResults(jobId: number, results: object) Promise~void~
    }
    
    class ResultRepository {
        +findAll(filters: object) Promise~CrawlResult[]~
        +findByVendorId(vendorId: number) Promise~CrawlResult[]~
        +findByCrawlId(crawlId: number) Promise~CrawlResult[]~
        +getStatistics(filters: object) Promise~Statistics~
    }
    
    %% Models/DTOs
    class Vendor {
        +id: number
        +url: string
        +name: string
        +description: string
        +created_at: Date
        +active: boolean
        +expected_products: object
    }
    
    class CrawlJob {
        +id: number
        +vendorId: number
        +started_at: Date
        +completed_at: Date
        +status: string
        +error: string
        +pages_crawled: number
        +crawler_type: string
    }
    
    class CrawlResult {
        +url: string
        +title: string
        +content: string
        +status_code: number
        +response_time: number
        +headings: string
        +links: string[]
    }
    
    class Product {
        +id: number
        +name: string
        +description: string
        +identifiers: object
    }
    
    class ProductOccurrence {
        +id: number
        +crawled_page_id: number
        +product_id: number
        +found: boolean
        +position: number
        +context: string
    }

    %% Crawler Classes
    class CrawlerFactory {
        +createCrawler(type: string, config: object) ICrawler
    }
    
    class ICrawler {
        <<interface>>
        +crawlUrl(url: string) Promise~CrawlResult~
        +getStatus() CrawlStatus
    }
    
    class BaseCrawler {
        #config: object
        +crawlUrl(url: string) Promise~CrawlResult~
        +getStatus() CrawlStatus
        #validateUrl(url: string) boolean
        #handleCrawlError(error: Error) Error
    }
    
    class ScrapingBeeCrawler {
        -apiKey: string
        -endpoint: string
        +crawlUrl(url: string) Promise~CrawlResult~
        -formatResponse(response: object) CrawlResult
    }
    
    %% Security Classes
    class ApiKeyManager {
        -masterKey: string
        -algorithm: string
        +encrypt(apiKey: string) string
        +decrypt(encryptedData: string) string
    }
    
    %% Relationships
    AppComponent --> DashboardComponent
    AppComponent --> VendorListComponent
    AppComponent --> ReportComponent
    AppComponent --> SettingsComponent
    
    VendorService --> VendorRepository
    CrawlService --> CrawlRepository
    CrawlService --> VendorService
    CrawlService --> CrawlerFactory
    ResultService --> ResultRepository
    ReportService --> ResultService
    SettingService --> SettingRepository

    CrawlerFactory ..> ICrawler
    ICrawler <|.. BaseCrawler
    BaseCrawler <|-- ScrapingBeeCrawler
    
    VendorListComponent ..> VendorService
    DashboardComponent ..> CrawlService
    ReportComponent ..> ReportService
    SettingsComponent ..> SettingService